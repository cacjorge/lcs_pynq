-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lcs_zigzag_pynq_50k is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_Ctrl_AWVALID : IN STD_LOGIC;
    s_axi_Ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_Ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_Ctrl_WVALID : IN STD_LOGIC;
    s_axi_Ctrl_WREADY : OUT STD_LOGIC;
    s_axi_Ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_Ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_Ctrl_ARVALID : IN STD_LOGIC;
    s_axi_Ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_Ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_Ctrl_RVALID : OUT STD_LOGIC;
    s_axi_Ctrl_RREADY : IN STD_LOGIC;
    s_axi_Ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_Ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_Ctrl_BVALID : OUT STD_LOGIC;
    s_axi_Ctrl_BREADY : IN STD_LOGIC;
    s_axi_Ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lcs_zigzag_pynq_50k is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lcs_zigzag_pynq_50k,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=258,HLS_SYN_DSP=0,HLS_SYN_FF=2000,HLS_SYN_LUT=2920,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_pp2_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_7FFFFFFF : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal X : STD_LOGIC_VECTOR (31 downto 0);
    signal Y : STD_LOGIC_VECTOR (31 downto 0);
    signal m : STD_LOGIC_VECTOR (31 downto 0);
    signal n : STD_LOGIC_VECTOR (31 downto 0);
    signal res : STD_LOGIC_VECTOR (31 downto 0);
    signal res_ap_vld : STD_LOGIC;
    signal mem_X_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_X_ce0 : STD_LOGIC;
    signal mem_X_we0 : STD_LOGIC;
    signal mem_X_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_Y_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_Y_ce0 : STD_LOGIC;
    signal mem_Y_we0 : STD_LOGIC;
    signal mem_Y_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal L_V_1_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_ce0 : STD_LOGIC;
    signal L_V_1_we0 : STD_LOGIC;
    signal L_V_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_ce1 : STD_LOGIC;
    signal L_V_1_we1 : STD_LOGIC;
    signal L_V_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_ce0 : STD_LOGIC;
    signal L_V_0_we0 : STD_LOGIC;
    signal L_V_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_ce1 : STD_LOGIC;
    signal L_V_0_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_ce0 : STD_LOGIC;
    signal L_V_2_we0 : STD_LOGIC;
    signal L_V_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_ce1 : STD_LOGIC;
    signal L_V_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln40_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln39_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln39_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln39_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal phi_ln40_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln40_reg_451_pp1_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal k_0_reg_487 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_498 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp2_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage2 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state27_pp2_stage2_iter0 : BOOLEAN;
    signal ap_block_state30_pp2_stage2_iter1 : BOOLEAN;
    signal ap_block_pp2_stage2_11001 : BOOLEAN;
    signal icmp_ln50_reg_1041 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_1088 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_read_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_read_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_reg_920_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln39_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem_addr_1_read_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln40_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_reg_934 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln40_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_941_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln40_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal gmem_addr_read_reg_950 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln44_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln44_1_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln44_1_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln45_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln45_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_fu_575_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln46_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln45_1_fu_580_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal xor_ln45_1_reg_978 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln20_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln44_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln46_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln46_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_fu_647_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal select_ln48_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln48_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln59_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln12_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln321_fu_692_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln321_reg_1037 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln50_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state25_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal k_fu_705_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal k_reg_1045 : STD_LOGIC_VECTOR (30 downto 0);
    signal j_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_1050 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln55_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1058_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_1_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln57_1_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln57_1_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_1_reg_1073 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln57_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_block_state26_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state29_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal icmp_ln57_reg_1088_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln60_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_reg_1092 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_reg_1092_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal L_V_1_addr_6_reg_1111 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_addr_3_gep_fu_280_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_addr_reg_1132 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_addr_reg_1137 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_load_1_reg_1142 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_load_2_reg_1148 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_load_1_reg_1164 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_addr_3_gep_fu_331_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln20_1_fu_797_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln20_1_reg_1174 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_V_1_addr_1_gep_fu_396_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln75_fu_855_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal line_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state25 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage2_subdone : BOOLEAN;
    signal ap_phi_mux_phi_ln39_phi_fu_443_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln40_phi_fu_455_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bi_0_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_assign_reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_k_0_phi_fu_491_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal sext_ln39_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln40_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln57_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal zext_ln56_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage2 : BOOLEAN;
    signal sext_ln20_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_V_0_addr_4_gep_fu_364_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_2_addr_4_gep_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_1_addr_2_gep_fu_388_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln20_1_fu_835_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal L_V_0_addr_2_gep_fu_413_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal L_V_0_addr_1_gep_fu_422_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_2_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln20_2_fu_782_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln214_2_fu_819_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln214_fu_839_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln214_1_fu_828_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln45_fu_567_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln45_1_fu_591_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln45_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_605_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_fu_600_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal start_col_fu_613_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln12_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_1_fu_635_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln12_1_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_2_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln50_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_1_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_fu_739_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_2_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bi_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_872_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_872_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_800 : BOOLEAN;
    signal ap_condition_804 : BOOLEAN;
    signal ap_condition_717 : BOOLEAN;
    signal ap_condition_670 : BOOLEAN;
    signal ap_condition_696 : BOOLEAN;
    signal ap_condition_706 : BOOLEAN;
    signal ap_condition_713 : BOOLEAN;

    component lcs_zigzag_pynq_50k_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lcs_zigzag_pynq_50k_mem_X IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component lcs_zigzag_pynq_50k_L_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lcs_zigzag_pynq_50k_L_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lcs_zigzag_pynq_50k_Ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        X : OUT STD_LOGIC_VECTOR (31 downto 0);
        Y : OUT STD_LOGIC_VECTOR (31 downto 0);
        m : OUT STD_LOGIC_VECTOR (31 downto 0);
        n : OUT STD_LOGIC_VECTOR (31 downto 0);
        res : IN STD_LOGIC_VECTOR (31 downto 0);
        res_ap_vld : IN STD_LOGIC );
    end component;


    component lcs_zigzag_pynq_50k_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    mem_X_U : component lcs_zigzag_pynq_50k_mem_X
    generic map (
        DataWidth => 8,
        AddressRange => 50000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_X_address0,
        ce0 => mem_X_ce0,
        we0 => mem_X_we0,
        d0 => gmem_addr_1_read_reg_929,
        q0 => mem_X_q0);

    mem_Y_U : component lcs_zigzag_pynq_50k_mem_X
    generic map (
        DataWidth => 8,
        AddressRange => 50000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_Y_address0,
        ce0 => mem_Y_ce0,
        we0 => mem_Y_we0,
        d0 => gmem_addr_read_reg_950,
        q0 => mem_Y_q0);

    L_V_1_U : component lcs_zigzag_pynq_50k_L_V_1
    generic map (
        DataWidth => 16,
        AddressRange => 50001,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L_V_1_address0,
        ce0 => L_V_1_ce0,
        we0 => L_V_1_we0,
        d0 => L_V_1_d0,
        q0 => L_V_1_q0,
        address1 => L_V_1_address1,
        ce1 => L_V_1_ce1,
        we1 => L_V_1_we1,
        d1 => L_V_0_q0,
        q1 => L_V_1_q1);

    L_V_0_U : component lcs_zigzag_pynq_50k_L_V_0
    generic map (
        DataWidth => 16,
        AddressRange => 50001,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L_V_0_address0,
        ce0 => L_V_0_ce0,
        we0 => L_V_0_we0,
        d0 => L_V_0_d0,
        q0 => L_V_0_q0,
        address1 => L_V_0_address1,
        ce1 => L_V_0_ce1,
        q1 => L_V_0_q1);

    L_V_2_U : component lcs_zigzag_pynq_50k_L_V_0
    generic map (
        DataWidth => 16,
        AddressRange => 50001,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => L_V_2_address0,
        ce0 => L_V_2_ce0,
        we0 => L_V_2_we0,
        d0 => L_V_2_d0,
        q0 => L_V_2_q0,
        address1 => L_V_2_address1,
        ce1 => L_V_2_ce1,
        q1 => L_V_2_q1);

    lcs_zigzag_pynq_50k_Ctrl_s_axi_U : component lcs_zigzag_pynq_50k_Ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_Ctrl_AWVALID,
        AWREADY => s_axi_Ctrl_AWREADY,
        AWADDR => s_axi_Ctrl_AWADDR,
        WVALID => s_axi_Ctrl_WVALID,
        WREADY => s_axi_Ctrl_WREADY,
        WDATA => s_axi_Ctrl_WDATA,
        WSTRB => s_axi_Ctrl_WSTRB,
        ARVALID => s_axi_Ctrl_ARVALID,
        ARREADY => s_axi_Ctrl_ARREADY,
        ARADDR => s_axi_Ctrl_ARADDR,
        RVALID => s_axi_Ctrl_RVALID,
        RREADY => s_axi_Ctrl_RREADY,
        RDATA => s_axi_Ctrl_RDATA,
        RRESP => s_axi_Ctrl_RRESP,
        BVALID => s_axi_Ctrl_BVALID,
        BREADY => s_axi_Ctrl_BREADY,
        BRESP => s_axi_Ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        X => X,
        Y => Y,
        m => m,
        n => n,
        res => res,
        res_ap_vld => res_ap_vld);

    lcs_zigzag_pynq_50k_gmem_m_axi_U : component lcs_zigzag_pynq_50k_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    lcs_zigzag_pynq_50k_mux_32_16_1_1_U1 : component lcs_zigzag_pynq_50k_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => L_V_0_q0,
        din1 => L_V_1_q0,
        din2 => L_V_2_q0,
        din3 => tmp_fu_872_p4,
        dout => tmp_fu_872_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_assign_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                a_assign_reg_475 <= line_fu_862_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                a_assign_reg_475 <= ap_const_lv32_1;
            end if; 
        end if;
    end process;

    bi_0_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                bi_0_reg_463 <= select_ln75_fu_855_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                bi_0_reg_463 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    k_0_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                k_0_reg_487 <= k_reg_1045;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                k_0_reg_487 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    phi_ln39_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_reg_920 = ap_const_lv1_0))) then 
                phi_ln39_reg_439 <= add_ln39_reg_924;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln39_reg_439 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_ln40_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_reg_941 = ap_const_lv1_0))) then 
                phi_ln40_reg_451 <= add_ln40_reg_945;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_ln40_reg_451 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                L_V_0_addr_reg_1132 <= zext_ln56_fu_772_p1(16 - 1 downto 0);
                L_V_1_addr_reg_1137 <= zext_ln56_fu_772_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln57_fu_761_p2 = ap_const_lv1_0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then
                L_V_1_addr_6_reg_1111 <= zext_ln60_fu_767_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then
                L_V_1_load_1_reg_1142 <= L_V_1_q0;
                L_V_1_load_2_reg_1148 <= L_V_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then
                L_V_2_load_1_reg_1164 <= L_V_2_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln39_reg_924 <= add_ln39_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln40_reg_945 <= add_ln40_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln44_1_reg_963 <= add_ln44_1_fu_562_p2;
                add_ln44_reg_955 <= add_ln44_fu_557_p2;
                add_ln46_reg_973 <= add_ln46_fu_575_p2;
                xor_ln45_1_reg_978 <= xor_ln45_1_fu_580_p2;
                xor_ln45_reg_968 <= xor_ln45_fu_570_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln50_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (or_ln55_fu_733_p2 = ap_const_lv1_0))) then
                add_ln57_1_reg_1067 <= add_ln57_1_fu_750_p2;
                sext_ln57_1_reg_1073 <= sext_ln57_1_fu_756_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                count_reg_1013 <= count_fu_647_p3;
                icmp_ln59_reg_1024 <= icmp_ln59_fu_668_p2;
                icmp_ln61_reg_1028 <= icmp_ln61_fu_674_p2;
                select_ln12_reg_1032 <= select_ln12_fu_685_p3;
                select_ln48_reg_1018 <= select_ln48_fu_660_p3;
                trunc_ln321_reg_1037 <= trunc_ln321_fu_692_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_reg_920 = ap_const_lv1_0))) then
                gmem_addr_1_read_reg_929 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                gmem_addr_1_reg_914 <= empty_2_fu_512_p1(32 - 1 downto 0);
                gmem_addr_reg_908 <= empty_fu_502_p1(32 - 1 downto 0);
                m_read_reg_898 <= m;
                n_read_reg_889 <= n;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_reg_941 = ap_const_lv1_0))) then
                gmem_addr_read_reg_950 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln39_reg_920 <= icmp_ln39_fu_522_p2;
                icmp_ln39_reg_920_pp0_iter1_reg <= icmp_ln39_reg_920;
                phi_ln39_reg_439_pp0_iter1_reg <= phi_ln39_reg_439;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln40_reg_941 <= icmp_ln40_fu_541_p2;
                icmp_ln40_reg_941_pp1_iter1_reg <= icmp_ln40_reg_941;
                phi_ln40_reg_451_pp1_iter1_reg <= phi_ln40_reg_451;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln50_reg_1041 <= icmp_ln50_fu_700_p2;
                or_ln55_reg_1058_pp2_iter1_reg <= or_ln55_reg_1058;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058 = ap_const_lv1_0))) then
                icmp_ln57_reg_1088 <= icmp_ln57_fu_761_p2;
                    zext_ln60_reg_1092(31 downto 0) <= zext_ln60_fu_767_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then
                icmp_ln57_reg_1088_pp2_iter1_reg <= icmp_ln57_reg_1088;
                    zext_ln60_reg_1092_pp2_iter1_reg(31 downto 0) <= zext_ln60_reg_1092(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln50_fu_700_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                j_reg_1050 <= j_fu_716_p2;
                or_ln55_reg_1058 <= or_ln55_fu_733_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                k_reg_1045 <= k_fu_705_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)))) then
                reg_498 <= L_V_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then
                select_ln20_1_reg_1174 <= select_ln20_1_fu_797_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                sext_ln40_reg_934 <= sext_ln40_fu_538_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (icmp_ln44_fu_586_p2 = ap_const_lv1_0))) then
                sub_ln46_reg_992 <= sub_ln46_fu_625_p2;
                    zext_ln20_reg_986(30 downto 0) <= zext_ln20_fu_621_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln20_reg_986(31) <= '0';
    zext_ln60_reg_1092(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln60_reg_1092_pp2_iter1_reg(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, gmem_ARREADY, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, icmp_ln39_fu_522_p2, ap_enable_reg_pp0_iter0, icmp_ln40_fu_541_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state23, icmp_ln44_fu_586_p2, icmp_ln50_fu_700_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp2_stage2_subdone, ap_block_pp2_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln39_fu_522_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln39_fu_522_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln40_fu_541_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln40_fu_541_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln44_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln50_fu_700_p2 = ap_const_lv1_0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln50_fu_700_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_pp2_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) and (ap_const_boolean_0 = ap_block_pp2_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage2_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage2;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    L_V_0_addr_1_gep_fu_422_p3 <= zext_ln60_reg_1092(16 - 1 downto 0);
    L_V_0_addr_2_gep_fu_413_p3 <= zext_ln60_reg_1092(16 - 1 downto 0);
    L_V_0_addr_3_gep_fu_331_p3 <= sext_ln57_1_reg_1073(16 - 1 downto 0);
    L_V_0_addr_4_gep_fu_364_p3 <= zext_ln60_reg_1092(16 - 1 downto 0);

    L_V_0_address0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, sext_ln40_reg_934, ap_CS_fsm_state23, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, or_ln55_reg_1058_pp2_iter1_reg, sext_ln57_1_reg_1073, ap_CS_fsm_pp2_stage1, zext_ln60_reg_1092, L_V_0_addr_reg_1132, L_V_0_addr_3_gep_fu_331_p3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, L_V_0_addr_4_gep_fu_364_p3, sext_ln20_1_fu_835_p1, L_V_0_addr_2_gep_fu_413_p3, L_V_0_addr_1_gep_fu_422_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0))) then 
            L_V_0_address0 <= L_V_0_addr_1_gep_fu_422_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0))) then 
            L_V_0_address0 <= L_V_0_addr_2_gep_fu_413_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0))) then 
            L_V_0_address0 <= sext_ln20_1_fu_835_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_0_address0 <= L_V_0_addr_4_gep_fu_364_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_0_address0 <= zext_ln60_reg_1092(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            L_V_0_address0 <= L_V_0_addr_reg_1132;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_0_address0 <= L_V_0_addr_3_gep_fu_331_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_0_address0 <= sext_ln57_1_reg_1073(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_V_0_address0 <= sext_ln40_reg_934(16 - 1 downto 0);
        else 
            L_V_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    L_V_0_address1 <= zext_ln60_reg_1092(16 - 1 downto 0);

    L_V_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, ap_CS_fsm_state23, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, or_ln55_reg_1058_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((trunc_ln321_reg_1037 = ap_const_lv2_0) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)) or ((icmp_ln57_reg_1088 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)))) then 
            L_V_0_ce0 <= ap_const_logic_1;
        else 
            L_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_0_ce1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            L_V_0_ce1 <= ap_const_logic_1;
        else 
            L_V_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_0_d0_assign_proc : process(L_V_2_q0, ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, or_ln55_reg_1058_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, ap_block_pp2_stage2, select_ln20_2_fu_782_p3, add_ln214_2_fu_819_p2, add_ln214_fu_839_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0))) then 
            L_V_0_d0 <= add_ln214_fu_839_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0))) then 
            L_V_0_d0 <= L_V_2_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_0_d0 <= add_ln214_2_fu_819_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_0_d0 <= select_ln20_2_fu_782_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage2) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            L_V_0_d0 <= ap_const_lv16_0;
        else 
            L_V_0_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_V_0_we0_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, or_ln55_reg_1058_pp2_iter1_reg, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((trunc_ln321_reg_1037 = ap_const_lv2_0) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
            L_V_0_we0 <= ap_const_logic_1;
        else 
            L_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    L_V_1_addr_1_gep_fu_396_p3 <= sext_ln57_1_reg_1073(16 - 1 downto 0);
    L_V_1_addr_2_gep_fu_388_p3 <= zext_ln60_reg_1092(16 - 1 downto 0);

    L_V_1_address0_assign_proc : process(ap_enable_reg_pp2_iter0, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, sext_ln40_reg_934, ap_CS_fsm_state23, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, sext_ln57_1_reg_1073, ap_CS_fsm_pp2_stage1, zext_ln60_reg_1092, L_V_1_addr_6_reg_1111, L_V_1_addr_reg_1137, L_V_1_addr_1_gep_fu_396_p3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, L_V_1_addr_2_gep_fu_388_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (or_ln55_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            L_V_1_address0 <= L_V_1_addr_reg_1137;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_1_address0 <= L_V_1_addr_1_gep_fu_396_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_1_address0 <= L_V_1_addr_2_gep_fu_388_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_1_address0 <= zext_ln60_reg_1092(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_1_address0 <= L_V_1_addr_6_reg_1111;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            L_V_1_address0 <= sext_ln57_1_reg_1073(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_V_1_address0 <= sext_ln40_reg_934(16 - 1 downto 0);
        else 
            L_V_1_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_V_1_address1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, zext_ln60_fu_767_p1, zext_ln60_reg_1092_pp2_iter1_reg, ap_enable_reg_pp2_iter1, ap_block_pp2_stage1, ap_block_pp2_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2))) then 
            L_V_1_address1 <= zext_ln60_reg_1092_pp2_iter1_reg(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            L_V_1_address1 <= zext_ln60_fu_767_p1(16 - 1 downto 0);
        else 
            L_V_1_address1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_V_1_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, ap_CS_fsm_state23, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (or_ln55_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            L_V_1_ce0 <= ap_const_logic_1;
        else 
            L_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_1_ce1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage2_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2)))) then 
            L_V_1_ce1 <= ap_const_logic_1;
        else 
            L_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_1_d0_assign_proc : process(or_ln55_reg_1058, trunc_ln321_reg_1037, select_ln20_2_fu_782_p3, add_ln214_2_fu_819_p2, add_ln214_1_fu_828_p2, ap_condition_800, ap_condition_804, ap_condition_717, ap_condition_670)
    begin
        if ((ap_const_boolean_1 = ap_condition_670)) then
            if (((trunc_ln321_reg_1037 = ap_const_lv2_1) and (or_ln55_reg_1058 = ap_const_lv1_1))) then 
                L_V_1_d0 <= ap_const_lv16_0;
            elsif ((ap_const_boolean_1 = ap_condition_717)) then 
                L_V_1_d0 <= add_ln214_1_fu_828_p2;
            elsif ((ap_const_boolean_1 = ap_condition_804)) then 
                L_V_1_d0 <= add_ln214_2_fu_819_p2;
            elsif ((ap_const_boolean_1 = ap_condition_800)) then 
                L_V_1_d0 <= select_ln20_2_fu_782_p3;
            else 
                L_V_1_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            L_V_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_V_1_we0_assign_proc : process(or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (or_ln55_reg_1058 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (trunc_ln321_reg_1037 = ap_const_lv2_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)))) then 
            L_V_1_we0 <= ap_const_logic_1;
        else 
            L_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_1_we1_assign_proc : process(ap_CS_fsm_pp2_stage2, ap_block_pp2_stage2_11001, icmp_ln59_reg_1024, icmp_ln61_reg_1028, or_ln55_reg_1058_pp2_iter1_reg, icmp_ln57_reg_1088_pp2_iter1_reg, ap_enable_reg_pp2_iter1)
    begin
        if (((icmp_ln61_reg_1028 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage2_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage2) and (icmp_ln57_reg_1088_pp2_iter1_reg = ap_const_lv1_0) and (or_ln55_reg_1058_pp2_iter1_reg = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0))) then 
            L_V_1_we1 <= ap_const_logic_1;
        else 
            L_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    L_V_2_addr_3_gep_fu_280_p3 <= sext_ln57_1_reg_1073(16 - 1 downto 0);
    L_V_2_addr_4_gep_fu_378_p3 <= zext_ln60_reg_1092(16 - 1 downto 0);

    L_V_2_address0_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, sext_ln40_reg_934, ap_CS_fsm_state23, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, sext_ln57_1_reg_1073, icmp_ln57_fu_761_p2, ap_CS_fsm_pp2_stage1, zext_ln60_reg_1092, L_V_2_addr_3_gep_fu_280_p3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, ap_block_pp2_stage1, zext_ln56_fu_772_p1, sext_ln20_fu_814_p1, L_V_2_addr_4_gep_fu_378_p3)
    begin
        if ((not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_2_address0 <= L_V_2_addr_4_gep_fu_378_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_2_address0 <= sext_ln20_fu_814_p1(16 - 1 downto 0);
        elsif ((not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_2_address0 <= zext_ln60_reg_1092(16 - 1 downto 0);
        elsif ((not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage1) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            L_V_2_address0 <= zext_ln56_fu_772_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln57_fu_761_p2 = ap_const_lv1_1) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_2_address0 <= L_V_2_addr_3_gep_fu_280_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage1) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln57_fu_761_p2 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0))) then 
            L_V_2_address0 <= sext_ln57_1_reg_1073(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            L_V_2_address0 <= sext_ln40_reg_934(16 - 1 downto 0);
        else 
            L_V_2_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    L_V_2_address1 <= zext_ln60_fu_767_p1(16 - 1 downto 0);

    L_V_2_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, ap_CS_fsm_state23, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, icmp_ln57_fu_761_p2, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or (not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or (not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln57_fu_761_p2 = ap_const_lv1_1) and (icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln59_reg_1024 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln57_fu_761_p2 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)))) then 
            L_V_2_ce0 <= ap_const_logic_1;
        else 
            L_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_2_ce1_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            L_V_2_ce1 <= ap_const_logic_1;
        else 
            L_V_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_V_2_d0_assign_proc : process(trunc_ln321_reg_1037, select_ln20_2_fu_782_p3, add_ln214_2_fu_819_p2, ap_condition_696, ap_condition_706, ap_condition_713)
    begin
        if ((not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)))) then
            if ((ap_const_boolean_1 = ap_condition_713)) then 
                L_V_2_d0 <= add_ln214_2_fu_819_p2;
            elsif ((ap_const_boolean_1 = ap_condition_706)) then 
                L_V_2_d0 <= select_ln20_2_fu_782_p3;
            elsif ((ap_const_boolean_1 = ap_condition_696)) then 
                L_V_2_d0 <= ap_const_lv16_0;
            else 
                L_V_2_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            L_V_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_V_2_we0_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln50_reg_1041, or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, trunc_ln321_reg_1037, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or (not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0)) or (not((trunc_ln321_reg_1037 = ap_const_lv2_1)) and not((trunc_ln321_reg_1037 = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then 
            L_V_2_we0 <= ap_const_logic_1;
        else 
            L_V_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln19_fu_600_p2 <= std_logic_vector(unsigned(xor_ln45_1_reg_978) + unsigned(trunc_ln45_1_fu_591_p1));
    add_ln214_1_fu_828_p2 <= std_logic_vector(unsigned(reg_498) + unsigned(ap_const_lv16_1));
    add_ln214_2_fu_819_p2 <= std_logic_vector(unsigned(L_V_0_q0) + unsigned(ap_const_lv16_1));
    add_ln214_fu_839_p2 <= std_logic_vector(unsigned(L_V_1_q0) + unsigned(ap_const_lv16_1));
    add_ln39_fu_527_p2 <= std_logic_vector(signed(ap_phi_mux_phi_ln39_phi_fu_443_p4) + signed(ap_const_lv32_1));
    add_ln40_fu_546_p2 <= std_logic_vector(signed(ap_phi_mux_phi_ln40_phi_fu_455_p4) + signed(ap_const_lv32_1));
    add_ln44_1_fu_562_p2 <= std_logic_vector(signed(n_read_reg_889) + signed(add_ln44_fu_557_p2));
    add_ln44_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(m_read_reg_898));
    add_ln45_fu_595_p2 <= std_logic_vector(unsigned(xor_ln45_reg_968) + unsigned(a_assign_reg_475));
    add_ln46_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(n_read_reg_889));
    add_ln57_1_fu_750_p2 <= std_logic_vector(unsigned(j_fu_716_p2) + unsigned(ap_const_lv32_FFFFFFFF));
    add_ln57_fu_739_p2 <= std_logic_vector(unsigned(sub_ln52_fu_711_p2) + unsigned(ap_const_lv32_FFFFFFFE));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(21);
    ap_CS_fsm_pp2_stage2 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state24 <= ap_CS_fsm(19);
    ap_CS_fsm_state31 <= ap_CS_fsm(23);
    ap_CS_fsm_state32 <= ap_CS_fsm(24);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln39_reg_920, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln39_reg_920 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln39_reg_920, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln39_reg_920 = ap_const_lv1_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln40_reg_941, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln40_reg_941 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln40_reg_941, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln40_reg_941 = ap_const_lv1_0));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln39_reg_920, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln39_reg_920 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(icmp_ln40_reg_941, gmem_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln40_reg_941 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_670_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
                ap_condition_670 <= ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0));
    end process;


    ap_condition_696_assign_proc : process(ap_enable_reg_pp2_iter0, icmp_ln50_reg_1041, or_ln55_reg_1058, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1)
    begin
                ap_condition_696 <= ((ap_const_boolean_0 = ap_block_pp2_stage1) and (or_ln55_reg_1058 = ap_const_lv1_1) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1));
    end process;


    ap_condition_706_assign_proc : process(or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
                ap_condition_706 <= ((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0));
    end process;


    ap_condition_713_assign_proc : process(or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
                ap_condition_713 <= ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0));
    end process;


    ap_condition_717_assign_proc : process(or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028)
    begin
                ap_condition_717 <= ((icmp_ln61_reg_1028 = ap_const_lv1_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0));
    end process;


    ap_condition_800_assign_proc : process(or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, trunc_ln321_reg_1037)
    begin
                ap_condition_800 <= ((trunc_ln321_reg_1037 = ap_const_lv2_1) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (icmp_ln57_reg_1088 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0));
    end process;


    ap_condition_804_assign_proc : process(or_ln55_reg_1058, icmp_ln57_reg_1088, icmp_ln59_reg_1024, icmp_ln61_reg_1028, trunc_ln321_reg_1037)
    begin
                ap_condition_804 <= ((trunc_ln321_reg_1037 = ap_const_lv2_1) and (icmp_ln57_reg_1088 = ap_const_lv1_1) and (icmp_ln61_reg_1028 = ap_const_lv1_0) and (icmp_ln59_reg_1024 = ap_const_lv1_0) and (or_ln55_reg_1058 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln39_fu_522_p2)
    begin
        if ((icmp_ln39_fu_522_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln40_fu_541_p2)
    begin
        if ((icmp_ln40_fu_541_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state25_assign_proc : process(icmp_ln50_fu_700_p2)
    begin
        if ((icmp_ln50_fu_700_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_k_0_phi_fu_491_p4_assign_proc : process(k_0_reg_487, icmp_ln50_reg_1041, ap_CS_fsm_pp2_stage0, k_reg_1045, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln50_reg_1041 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_k_0_phi_fu_491_p4 <= k_reg_1045;
        else 
            ap_phi_mux_k_0_phi_fu_491_p4 <= k_0_reg_487;
        end if; 
    end process;


    ap_phi_mux_phi_ln39_phi_fu_443_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln39_reg_920, phi_ln39_reg_439, add_ln39_reg_924)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_reg_920 = ap_const_lv1_0))) then 
            ap_phi_mux_phi_ln39_phi_fu_443_p4 <= add_ln39_reg_924;
        else 
            ap_phi_mux_phi_ln39_phi_fu_443_p4 <= phi_ln39_reg_439;
        end if; 
    end process;


    ap_phi_mux_phi_ln40_phi_fu_455_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln40_reg_941, phi_ln40_reg_451, add_ln40_reg_945)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_reg_941 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_phi_ln40_phi_fu_455_p4 <= add_ln40_reg_945;
        else 
            ap_phi_mux_phi_ln40_phi_fu_455_p4 <= phi_ln40_reg_451;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bi_fu_850_p2 <= std_logic_vector(unsigned(select_ln48_reg_1018) + unsigned(ap_const_lv32_1));
    count_fu_647_p3 <= 
        select_ln12_1_fu_635_p3 when (icmp_ln12_1_fu_642_p2(0) = '1') else 
        add_ln44_reg_955;
        empty_2_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X),64));

        empty_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Y),64));


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, gmem_ARREADY, gmem_addr_reg_908, gmem_addr_1_reg_914)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARADDR <= gmem_addr_reg_908;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARADDR <= gmem_addr_1_reg_914;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, gmem_ARREADY, n_read_reg_889, m_read_reg_898)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARLEN <= n_read_reg_889;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARLEN <= m_read_reg_898;
            else 
                gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state2, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln40_reg_941, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln39_reg_920, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_reg_920 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_reg_941 = ap_const_lv1_0)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state12, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln40_reg_941, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln39_reg_920)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_reg_920 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_reg_941 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln12_1_fu_642_p2 <= "1" when (signed(select_ln12_1_fu_635_p3) < signed(add_ln44_reg_955)) else "0";
    icmp_ln12_2_fu_680_p2 <= "1" when (signed(add_ln44_reg_955) < signed(a_assign_reg_475)) else "0";
    icmp_ln12_fu_630_p2 <= "1" when (signed(a_assign_reg_475) < signed(sub_ln46_reg_992)) else "0";
    icmp_ln20_1_fu_791_p2 <= "1" when (unsigned(L_V_0_q0) > unsigned(L_V_0_q1)) else "0";
    icmp_ln20_2_fu_778_p2 <= "1" when (unsigned(L_V_1_load_1_reg_1142) > unsigned(L_V_1_load_2_reg_1148)) else "0";
    icmp_ln20_fu_803_p2 <= "1" when (unsigned(reg_498) > unsigned(L_V_2_load_1_reg_1164)) else "0";
    icmp_ln39_fu_522_p2 <= "1" when (ap_phi_mux_phi_ln39_phi_fu_443_p4 = m_read_reg_898) else "0";
    icmp_ln40_fu_541_p2 <= "1" when (ap_phi_mux_phi_ln40_phi_fu_455_p4 = n_read_reg_889) else "0";
    icmp_ln44_fu_586_p2 <= "1" when (signed(a_assign_reg_475) > signed(add_ln44_1_reg_963)) else "0";
    icmp_ln48_fu_654_p2 <= "1" when (signed(bi_0_reg_463) > signed(ap_const_lv32_2)) else "0";
    icmp_ln50_fu_700_p2 <= "1" when (signed(zext_ln50_fu_696_p1) < signed(count_reg_1013)) else "0";
    icmp_ln55_1_fu_727_p2 <= "1" when (j_fu_716_p2 = ap_const_lv32_0) else "0";
    icmp_ln55_fu_721_p2 <= "1" when (sub_ln52_fu_711_p2 = ap_const_lv32_1) else "0";
    icmp_ln57_fu_761_p2 <= "1" when (mem_X_q0 = mem_Y_q0) else "0";
    icmp_ln59_fu_668_p2 <= "1" when (select_ln48_fu_660_p3 = ap_const_lv32_0) else "0";
    icmp_ln61_fu_674_p2 <= "1" when (select_ln48_fu_660_p3 = ap_const_lv32_1) else "0";
    icmp_ln75_fu_846_p2 <= "1" when (signed(zext_ln20_reg_986) < signed(m_read_reg_898)) else "0";
    j_fu_716_p2 <= std_logic_vector(unsigned(zext_ln50_fu_696_p1) + unsigned(zext_ln20_reg_986));
    k_fu_705_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_0_phi_fu_491_p4) + unsigned(ap_const_lv31_1));
    line_fu_862_p2 <= std_logic_vector(unsigned(a_assign_reg_475) + unsigned(ap_const_lv32_1));

    mem_X_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, sext_ln39_fu_533_p1, sext_ln57_fu_745_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            mem_X_address0 <= sext_ln57_fu_745_p1(16 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mem_X_address0 <= sext_ln39_fu_533_p1(16 - 1 downto 0);
        else 
            mem_X_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_X_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            mem_X_ce0 <= ap_const_logic_1;
        else 
            mem_X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_X_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln39_reg_920_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln39_reg_920_pp0_iter1_reg = ap_const_lv1_0))) then 
            mem_X_we0 <= ap_const_logic_1;
        else 
            mem_X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_Y_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, sext_ln57_1_fu_756_p1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, sext_ln40_1_fu_552_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            mem_Y_address0 <= sext_ln57_1_fu_756_p1(16 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mem_Y_address0 <= sext_ln40_1_fu_552_p1(16 - 1 downto 0);
        else 
            mem_Y_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_Y_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            mem_Y_ce0 <= ap_const_logic_1;
        else 
            mem_Y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_Y_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln40_reg_941_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln40_reg_941_pp1_iter1_reg = ap_const_lv1_0))) then 
            mem_Y_we0 <= ap_const_logic_1;
        else 
            mem_Y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln55_fu_733_p2 <= (icmp_ln55_fu_721_p2 or icmp_ln55_1_fu_727_p2);
    res <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_872_p5),32));

    res_ap_vld_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            res_ap_vld <= ap_const_logic_1;
        else 
            res_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln12_1_fu_635_p3 <= 
        a_assign_reg_475 when (icmp_ln12_fu_630_p2(0) = '1') else 
        sub_ln46_reg_992;
    select_ln12_fu_685_p3 <= 
        add_ln44_reg_955 when (icmp_ln12_2_fu_680_p2(0) = '1') else 
        a_assign_reg_475;
    select_ln20_1_fu_797_p3 <= 
        add_ln57_1_reg_1067 when (icmp_ln20_1_fu_791_p2(0) = '1') else 
        j_reg_1050;
    select_ln20_2_fu_782_p3 <= 
        L_V_1_load_1_reg_1142 when (icmp_ln20_2_fu_778_p2(0) = '1') else 
        L_V_1_load_2_reg_1148;
    select_ln20_fu_808_p3 <= 
        add_ln57_1_reg_1067 when (icmp_ln20_fu_803_p2(0) = '1') else 
        j_reg_1050;
    select_ln48_fu_660_p3 <= 
        ap_const_lv32_0 when (icmp_ln48_fu_654_p2(0) = '1') else 
        bi_0_reg_463;
    select_ln75_fu_855_p3 <= 
        bi_fu_850_p2 when (icmp_ln75_fu_846_p2(0) = '1') else 
        select_ln48_reg_1018;
        sext_ln20_1_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln20_1_reg_1174),64));

        sext_ln20_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln20_fu_808_p3),64));

        sext_ln39_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_ln39_reg_439_pp0_iter1_reg),64));

        sext_ln40_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(phi_ln40_reg_451_pp1_iter1_reg),64));

        sext_ln40_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(n_read_reg_889),64));

        sext_ln57_1_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln57_1_fu_750_p2),64));

        sext_ln57_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln57_fu_739_p2),64));

    start_col_fu_613_p3 <= 
        ap_const_lv31_0 when (tmp_1_fu_605_p3(0) = '1') else 
        add_ln19_fu_600_p2;
    sub_ln46_fu_625_p2 <= std_logic_vector(unsigned(add_ln46_reg_973) - unsigned(zext_ln20_fu_621_p1));
    sub_ln52_fu_711_p2 <= std_logic_vector(unsigned(select_ln12_reg_1032) - unsigned(zext_ln50_fu_696_p1));
    tmp_1_fu_605_p3 <= add_ln45_fu_595_p2(31 downto 31);
    tmp_fu_872_p4 <= bi_0_reg_463(2 - 1 downto 0);
    trunc_ln321_fu_692_p1 <= select_ln48_fu_660_p3(2 - 1 downto 0);
    trunc_ln45_1_fu_591_p1 <= a_assign_reg_475(31 - 1 downto 0);
    trunc_ln45_fu_567_p1 <= m_read_reg_898(31 - 1 downto 0);
    xor_ln45_1_fu_580_p2 <= (trunc_ln45_fu_567_p1 xor ap_const_lv31_7FFFFFFF);
    xor_ln45_fu_570_p2 <= (m_read_reg_898 xor ap_const_lv32_FFFFFFFF);
    zext_ln20_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_col_fu_613_p3),32));
    zext_ln50_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_0_phi_fu_491_p4),32));
    zext_ln56_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1050),64));
    zext_ln60_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_1050),64));
end behav;
